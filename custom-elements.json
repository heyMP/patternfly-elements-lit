{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "elements/pfe-badge/dist/pfe-badge.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "PfeBadge",
          "default": "class extends PFElement {\n  constructor() {\n    super(...arguments);\n    this.number = 0;\n    this.threshold = 0;\n    this.displayText = \"\";\n  }\n  static get tag() {\n    return \"pfe-badge\";\n  }\n  static get properties() {\n    return {\n      number: { type: Number },\n      threshold: { type: Number },\n      displayText: { type: String }\n    };\n  }\n  render() {\n    return html`\n      <span>${this.displayText}</span>\n    `;\n  }\n  updated(changedProperties) {\n    if (changedProperties.has(\"number\") || changedProperties.has(\"threshold\")) {\n      this.displayText = this.textContent = this.threshold && this.threshold < this.number ? `${this.threshold.toString()}+` : this.number.toString();\n    }\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "pfe-badge",
          "declaration": {
            "name": "PfeBadge",
            "module": "elements/pfe-badge/dist/pfe-badge.js"
          }
        },
        {
          "kind": "js",
          "name": "PfeBadge",
          "declaration": {
            "name": "PfeBadge",
            "module": "elements/pfe-badge/dist/pfe-badge.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/pfe-button/dist/pfe-button.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "PfeButton",
          "default": "_PfeButton"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfeButton",
          "declaration": {
            "name": "PfeButton",
            "module": "elements/pfe-button/dist/pfe-button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/pfe-card/dist/pfe-card.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "PfeCard",
          "default": "class extends PFElement {\n  static get tag() {\n    return \"pfe-card\";\n  }\n  static get properties() {\n    return {\n      imgSrc: {\n        type: String,\n        attribute: \"img-src\"\n      }\n    };\n  }\n  static get slots() {\n    return {\n      header: {\n        title: \"Header\",\n        type: \"array\",\n        namedSlot: true,\n        maxItems: 3,\n        items: {\n          $ref: \"raw\"\n        }\n      },\n      body: {\n        title: \"Body\",\n        type: \"array\",\n        namedSlot: false,\n        items: {\n          $ref: \"raw\"\n        }\n      },\n      footer: {\n        title: \"Footer\",\n        type: \"array\",\n        namedSlot: true,\n        maxItems: 3,\n        items: {\n          oneOf: [\n            {\n              $ref: \"pfe-cta\"\n            },\n            {\n              $ref: \"raw\"\n            }\n          ]\n        }\n      }\n    };\n  }\n  render() {\n    return html`\n      <div class=\"pfe-card__header\">\n        <slot name=\"pfe-card--header\"></slot>\n      </div>\n      <div class=\"pfe-card__body\">\n        <slot></slot>\n      </div>\n      <div class=\"pfe-card__footer\">\n        <slot name=\"pfe-card--footer\"></slot>\n      </div>\n  `;\n  }\n  updated(changedProperties) {\n    if (changedProperties.has(\"imgSrc\")) {\n      this.style.backgroundImage = `url('${this.imgSrc}')`;\n    }\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfeCard",
          "declaration": {
            "name": "PfeCard",
            "module": "elements/pfe-card/dist/pfe-card.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/pfe-clipboard/dist/pfe-clipboard.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "PfeClipboard",
          "default": "_PfeClipboard"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "pfe-clipboard",
          "declaration": {
            "name": "PfeClipboard",
            "module": "elements/pfe-clipboard/dist/pfe-clipboard.js"
          }
        },
        {
          "kind": "js",
          "name": "PfeClipboard",
          "declaration": {
            "name": "PfeClipboard",
            "module": "elements/pfe-clipboard/dist/pfe-clipboard.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/pfe-cta/dist/pfe-cta.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "PfeCta",
          "default": "_PfeCta"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfeCta",
          "declaration": {
            "name": "PfeCta",
            "module": "elements/pfe-cta/dist/pfe-cta.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "elements/pfelement/dist/pfelement.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "PFElement",
          "default": "class extends LitElement {\n  static debugLog(preference = null) {\n    if (preference !== null) {\n      try {\n        localStorage.pfeLog = !!preference;\n      } catch (e) {\n        PFElement._debugLog = !!preference;\n        return PFElement._debugLog;\n      }\n    }\n    return localStorage.pfeLog === \"true\" || PFElement._debugLog;\n  }\n  static trackPerformance(preference = null) {\n    if (preference !== null) {\n      PFElement._trackPerformance = !!preference;\n    }\n    return PFElement._trackPerformance;\n  }\n  static log(...msgs) {\n    if (PFElement.debugLog()) {\n      console.log(...msgs);\n    }\n  }\n  log(...msgs) {\n    PFElement.log(`[${this.tag}${this.id ? `#${this.id}` : \"\"}]`, ...msgs);\n  }\n  static warn(...msgs) {\n    console.warn(...msgs);\n  }\n  warn(...msgs) {\n    PFElement.warn(`[${this.constructor.tag}${this.id ? `#${this.id}` : ``}]`, ...msgs);\n  }\n  static error(...msgs) {\n    throw new Error([...msgs].join(\" \"));\n  }\n  error(...msgs) {\n    PFElement.error(`[${this.tag}${this.id ? `#${this.id}` : ``}]`, ...msgs);\n  }\n  get properties() {\n    return {\n      pfelement: {\n        type: Boolean,\n        reflect: true\n      }\n    };\n  }\n  static get PfeTypes() {\n    return {\n      Container: \"container\",\n      Content: \"content\",\n      Combo: \"combo\"\n    };\n  }\n  static get version() {\n    return \"{{version}}\";\n  }\n  static get breakpoint() {\n    return {\n      xs: \"0px\",\n      sm: \"576px\",\n      md: \"768px\",\n      lg: \"992px\",\n      xl: \"1200px\",\n      \"2xl\": \"1450px\"\n    };\n  }\n  hasLightDOM() {\n    return this.children.length > 0 || this.textContent.trim().length > 0;\n  }\n  static create(pfe) {\n    window.customElements.define(pfe.tag, pfe);\n    if (PFElement.trackPerformance()) {\n      try {\n        performance.mark(`${this._markId}-defined`);\n      } catch (err) {\n        this.log(`Performance marks are not supported by this browser.`);\n      }\n    }\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.pfelement = true;\n    if (typeof this.constructor.slots === \"object\") {\n      this._slotsObserver = new MutationObserver(() => this._initializeSlots(this.constructor.tag, this.constructor.slots));\n      this._initializeSlots(this.constructor.tag, this.constructor.slots);\n    }\n  }\n  disconnectedCallback() {\n    if (this._slotsObserver)\n      this._slotsObserver.disconnect();\n  }\n  _initializeSlots(tag, slots) {\n    this.log(\"Validate slots...\");\n    if (this._slotsObserver)\n      this._slotsObserver.disconnect();\n    Object.keys(slots).forEach((slot) => {\n      let slotObj = slots[slot];\n      if (typeof slotObj === \"object\") {\n        let slotExists = false;\n        let result = [];\n        if (slotObj.namedSlot) {\n          result = this.getSlot(`${tag}--${slot}`);\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n          result = this.getSlot(`${slot}`);\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n        } else {\n          result = [...this.children].filter((child) => !child.hasAttribute(\"slot\"));\n          if (result.length > 0) {\n            slotObj.nodes = result;\n            slotExists = true;\n          }\n        }\n        if (slotExists) {\n          this.setAttribute(`has_${slot}`, \"\");\n        } else {\n          this.removeAttribute(`has_${slot}`);\n        }\n      }\n    });\n    this.log(\"Slots validated.\");\n    if (this._slotsObserver)\n      this._slotsObserver.observe(this, { childList: true });\n  }\n  hasSlot(name) {\n    if (!name) {\n      this.warn(`Please provide at least one slot name for which to search.`);\n      return;\n    }\n    if (typeof name === \"string\") {\n      return [...this.children].filter((child) => child.hasAttribute(\"slot\") && child.getAttribute(\"slot\") === name).length > 0;\n    } else if (Array.isArray(name)) {\n      return name.reduce((n) => [...this.children].filter((child) => child.hasAttribute(\"slot\") && child.getAttribute(\"slot\") === n).length > 0);\n    } else {\n      this.warn(`Expected hasSlot argument to be a string or an array, but it was given: ${typeof name}.`);\n      return;\n    }\n  }\n  getSlot(name = \"unassigned\") {\n    if (name !== \"unassigned\") {\n      return [...this.children].filter((child) => child.hasAttribute(\"slot\") && child.getAttribute(\"slot\") === name);\n    } else {\n      return [...this.children].filter((child) => !child.hasAttribute(\"slot\"));\n    }\n  }\n  emitEvent(name, { bubbles = true, cancelable = false, composed = true, detail = {} } = {}) {\n    if (detail)\n      this.log(`Custom event: ${name}`, JSON.stringify(detail));\n    else\n      this.log(`Custom event: ${name}`);\n    this.dispatchEvent(new CustomEvent(name, {\n      bubbles,\n      cancelable,\n      composed,\n      detail\n    }));\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "declaration": {
            "name": "pfe",
            "module": "elements/pfelement/dist/pfelement.js"
          }
        },
        {
          "kind": "js",
          "name": "PFElement",
          "declaration": {
            "name": "PFElement",
            "module": "elements/pfelement/dist/pfelement.js"
          }
        }
      ]
    }
  ]
}
